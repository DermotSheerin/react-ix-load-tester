{"version":3,"sources":["components/api/chatStats-api.js","components/buttons/startButton.js","components/buttons/stopButton.js","components/chatStats/index.js","components/siteHeader/index.js","components/chatParameters/index.js","components/hooks/useChatStats.js","components/pages/chatStatsPage.js","components/hooks/useChatParameters.js","components/pages/chatParametersPage.js","index.js"],"names":["baseIP","config","headers","getStats","a","axios","get","startTest","stopTest","changeChatParameters","data","post","JSON","stringify","getChatParameters","StartButton","className","onClick","StopButton","ChatStats","chatStats","scope","Object","entries","map","key","value","SiteHeader","to","ChatParameters","chatParameters","useState","concurrentCallers","setConcurrentCallers","chatSendMax","setChatSendMax","firstMsgSendDelay","setFirstMsgSendDelay","respondMsgDelay","setRespondMsgDelay","delayBetweenLoops","setDelayBetweenLoops","agentJoinTimeout","setAgentJoinTimeout","agentSendsBye","setAgentSendsBye","useForm","register","handleSubmit","reset","errors","onSubmit","console","log","type","placeholder","required","name","onChange","e","Number","target","ref","minLength","message","email","password","useChatStats","setChatStats","useEffect","setInterval","then","stats","ChatStatsPage","useChatParameters","setChatParameters","ChatParametersPage","App","path","component","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df9f8e9e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseIP = \"10.134.45.26\"\r\nconst port = 8000;\r\n\r\n// const baseIP = \"localhost\"\r\n// const port = 8000;\r\n//\r\n\r\nconst config = {\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n  // export const getStats = async () => {\r\n  //   return await axios.get(\r\n  //     `http://localhost:3000/getStats`\r\n  //   )\r\n  // };\r\n\r\n\r\n  // export const getStats = () => {\r\n  //   return fetch(\r\n  //     `http://localhost:3000/getStats`\r\n  //   )\r\n  //     .then((res) => res.json())\r\n  //     .then((json) => json.results);\r\n  // };\r\n\r\n  export const getStats = async () => {\r\n    return await axios.get(\r\n      `http://${baseIP}:${port}/getStats`\r\n    )\r\n  };\r\n\r\n  export const startTest = async () => {\r\n    return await axios.get(\r\n      `http://${baseIP}:${port}/startTest`\r\n    )\r\n  };\r\n\r\n  export const stopTest = async () => {\r\n    return await axios.get(\r\n      `http://${baseIP}:${port}/stopTest`\r\n    )\r\n  };\r\n\r\n  export const changeChatParameters = async (data) => {\r\n    return await axios.post(\r\n      `http://${baseIP}:${port}/changeChatParameters/`, JSON.stringify(data), config\r\n    )\r\n  };\r\n\r\n  export const getChatParameters = async () => {\r\n    return await axios.get(\r\n      `http://${baseIP}:${port}/getChatParameters`\r\n    )\r\n  };\r\n\r\n  // export const toggleStart = async (toggle) => {\r\n  //   return await axios.post(\r\n  //     `http://localhost:3000/genStartStop/${toggle}`\r\n  //   )\r\n  // };","import React from \"react\";\r\nimport { startTest } from \"../api/chatStats-api\";\r\n\r\nconst StartButton = () => {\r\n\r\n  const handleClick = () => {\r\n    startTest()\r\n  }\r\n\r\n  return (\r\n    <button className=\"btn w-10 btn-secondary\" onClick={handleClick}>\r\n      Start Test\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StartButton;","import React from \"react\";\r\nimport { stopTest } from \"../api/chatStats-api\";\r\n\r\nconst StopButton = () => {\r\n\r\n  const handleClick = () => {\r\n    stopTest()\r\n  }\r\n\r\n  return (\r\n    <button className=\"btn w-10 btn-secondary\" onClick={handleClick}>\r\n      Stop Test\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StopButton;","import React from \"react\";\r\nimport StartButton from \"../buttons/startButton\";\r\nimport StopButton from \"../buttons/stopButton\";\r\n//import useChatStats from '../hooks/useChatStats'\r\n//import ToggleStartButton from \"../buttons/toggleStartButton\";\r\n\r\n\r\nconst ChatStats = ({chatStats}) => {\r\n\r\n    return (\r\n      <>\r\n      <div>\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n          <tr>\r\n              <th scope=\"col\">Step</th>      \r\n              <th scope=\"col\">Success</th>  \r\n              <th scope=\"col\">Fail</th>  \r\n          </tr>\r\n          </thead>\r\n          <tbody>         \r\n          {Object.entries(chatStats).map(([key, value]) =>\r\n            <tr key={key}>\r\n              <th>{key}</th>\r\n              <td>{value[0]}</td>\r\n              <td>{value[1]}</td>                   \r\n            </tr>\r\n              )}             \r\n          </tbody>\r\n        </table>\r\n        {/* </Table> */}\r\n        </div>\r\n        {/* <ToggleStartButton></ToggleStartButton> */}\r\n        <StartButton></StartButton>\r\n        {' '}\r\n        <StopButton></StopButton>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ChatStats;\r\n\r\n\r\n// return chatStats &&   (\r\n//   <div>\r\n// <Table responsive=\"sm\" size=\"sm\">\r\n//       <thead>\r\n//       <tr>\r\n//       {Object.entries(chatStats).map(([key, value]) =>  \r\n//           <th scope=\"col\">{key}</th>            \r\n//       )}\r\n//       </tr>\r\n//       </thead>\r\n//       <tbody>         \r\n//         <tr>\r\n//         {Object.entries(chatStats).map(([key, value]) =>\r\n//           <td>{value}</td>   \r\n//           )}                 \r\n//         </tr>\r\n        \r\n//       </tbody>\r\n//     </Table>\r\n//     </div>\r\n// ) ","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//import \"../../globals/fontawesome\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./siteHeader.css\";\r\n\r\n\r\nconst SiteHeader = () => {\r\n\r\n\r\n  return (\r\n    <nav className=\"navbar  navbar-light fixed-top  bg-dark \">\r\n      <nav className=\"navbar-brand text-white\">\r\n        <Link className=\" text-white\" to=\"/\">\r\n          IX Chat Generator\r\n        </Link>\r\n      </nav>\r\n      \r\n      <nav className=\"navbar navbar-expand \">\r\n        <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n            <Link className=\"nav-link text-white\" to=\"/chatParameters\">\r\n              Chat Parameters\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link text-white\" to=\"/\">\r\n              ChatStats\r\n            </Link>\r\n          </li>   \r\n        </ul>\r\n      </nav>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SiteHeader;","import React, { useState } from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {changeChatParameters} from \"../api/chatStats-api\"\r\n//import useChangeChatParameters from \"../hooks/useChangeChatParameters\"\r\n//import useChatParameters from '../hooks/useChatParameters'\r\n\r\n\r\nconst ChatParameters = ({chatParameters}) => {\r\n\r\n  const [concurrentCallers, setConcurrentCallers] = useState(chatParameters.data.concurrentCallers);\r\n  const [chatSendMax, setChatSendMax] = useState(chatParameters.data.chatSendMax);\r\n  const [firstMsgSendDelay, setFirstMsgSendDelay] = useState(chatParameters.data.firstMsgSendDelay);\r\n  const [respondMsgDelay, setRespondMsgDelay] = useState(chatParameters.data.respondMsgDelay);\r\n  const [delayBetweenLoops, setDelayBetweenLoops] = useState(chatParameters.data.delayBetweenLoops);\r\n  const [agentJoinTimeout, setAgentJoinTimeout] = useState(chatParameters.data.agentJoinTimeout);\r\n  const [agentSendsBye, setAgentSendsBye] = useState(chatParameters.data.agentSendsBye);\r\n  // const [customerMsgText, setCustomerMsgText] = useState(\"\");\r\n  // const [customerBye, setCustomerBye] = useState(\"\");\r\n\r\n  const { register, handleSubmit, errors, reset } = useForm();\r\n\r\n  // using custom error hook to store, add and clear login authentication errors\r\n//   const [error, addError, clearError] = useError();\r\n//   const setLoginError = (newError) => addError(newError);\r\n//   const clearLoginError = () => clearError();\r\n\r\n  // had to add this here (and in LoginPage) otherwise when a user (a) was redirected to login for accessing a protected page (b) then logged in successfully - they did not get directed to the original page they were trying to access\r\n  //const { from } = user.location.state || { from: { pathname: \"/\" } };\r\n\r\n\r\n  const onSubmit = async () => {\r\n    const data = {concurrentCallers:concurrentCallers, chatSendMax:chatSendMax,firstMsgSendDelay:firstMsgSendDelay,respondMsgDelay:respondMsgDelay,\r\n      delayBetweenLoops: delayBetweenLoops, agentJoinTimeout:agentJoinTimeout, agentSendsBye:agentSendsBye }\r\n    changeChatParameters(data)\r\n    console.log(concurrentCallers, chatSendMax, firstMsgSendDelay, respondMsgDelay, delayBetweenLoops, agentJoinTimeout, agentSendsBye)\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <form\r\n          className=\"form bg-dark text-light\"\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <h2 className=\"text-center\">Chat Generator Parameters</h2>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Number of Concurrent Callers\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"concurrentCallers\"\r\n              value={concurrentCallers}\r\n              onChange={(e) => Number(setConcurrentCallers(e.target.value))}\r\n              ref={register({\r\n                required: \"ConcurrentCallers is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"ConcurrentCallers is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Number of Chat Messages per Interaction\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"chatSendMax\"\r\n              value={chatSendMax}\r\n              onChange={(e) => Number(setChatSendMax(e.target.value))}\r\n              ref={register({\r\n                required: \"ChatSendMax is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message:\r\n                    \"ChatSendMax is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Agent Sends Bye (true/false)\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"agentSendsBye\"\r\n              value={agentSendsBye}\r\n              onChange={(e) => Number(setAgentSendsBye(e.target.value))}\r\n              ref={register({\r\n                required: \"agentSendsBye is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message:\r\n                    \"agentSendsBye is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Delay prior to Sending First Chat Message (ms)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"firstMsgSendDelay\"\r\n              value={firstMsgSendDelay}\r\n              onChange={(e) => Number(setFirstMsgSendDelay(e.target.value))}\r\n              ref={register({\r\n                required: \"FirstMsgSendDelay is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"FirstMsgSendDelay is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Delay before responding to Chat Message (ms)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"respondMsgDelay\"\r\n              value={respondMsgDelay}\r\n              onChange={(e) => Number(setRespondMsgDelay(e.target.value))}\r\n              ref={register({\r\n                required: \"Respond Delay is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"Respond Delay is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Delay between Chat Flow Loops (ms)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"delayBetweenLoops\"\r\n              value={delayBetweenLoops}\r\n              onChange={(e) => Number(setDelayBetweenLoops(e.target.value))}\r\n              ref={register({\r\n                required: \"Delay Between Loops is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"Delay Between Loops is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Timeout for Agent Join (ms)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              required=\"required\"\r\n              name=\"agentJoinTimeout\"\r\n              value={agentJoinTimeout}\r\n              onChange={(e) => Number(setAgentJoinTimeout(e.target.value))}\r\n              ref={register({\r\n                required: \"Timeout for Agent Join is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"Timeout for Agent Join is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          {/* <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Message Text to Send\"\r\n              required=\"required\"\r\n              name=\"customerMsgText\"\r\n              onChange={(e) => setCustomerMsgText(e.target.value)}\r\n              ref={register({\r\n                required: \"Message Text to Send is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"Message Text to Send is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Text to initiate Agent Disconnect\"\r\n              required=\"required\"\r\n              name=\"customerBye\"\r\n              onChange={(e) => setCustomerBye(e.target.value)}\r\n              ref={register({\r\n                required: \"Text to initiate Agent Disconnect is required\",\r\n                minLength: {\r\n                  value: 1,\r\n                  message: \"Text to initiate Agent Disconnect is too short, minimum length is 1\",\r\n                },\r\n              })}\r\n            />\r\n          </div> */}\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\" className=\"btn-lg btn-primary btn-block\">\r\n              Submit\r\n            </button>\r\n            <button\r\n              type=\"reset\"\r\n              className=\"btn-sm btn-secondary btn-block\"\r\n              onClick={() => {\r\n                reset({\r\n                  email: \"\",\r\n                  password: \"\",\r\n                });\r\n              }}\r\n            >\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatParameters;","import { useEffect, useState } from \"react\";\r\nimport { getStats } from \"../api/chatStats-api\";\r\n\r\nconst useChatStats = () => {\r\n  const [chatStats, setChatStats] = useState(null);\r\n  useEffect(() => {\r\n    setInterval( () =>\r\n    getStats().then((stats) => {\r\n      setChatStats(stats.data);\r\n    }),5000);\r\n  }, []);\r\n  return [chatStats, setChatStats];\r\n};\r\n\r\nexport default useChatStats;","import React from \"react\";\r\nimport useChatStats from '../hooks/useChatStats'\r\nimport ChatStats from '../../components/chatStats'\r\n//import ToggleStartButton from \"../buttons/toggleStartButton\";\r\n\r\n\r\nconst ChatStatsPage = () => {\r\n  const [chatStats] = useChatStats();\r\n  console.log(`Here is complete stats in ChatStats component${chatStats}`)\r\n \r\n\r\n    return chatStats ?   (\r\n        <ChatStats chatStats={chatStats} /> \r\n    ) :\r\n    <h3>IX Chat Stats Not Available Yet .....please ensure nodeJS Generator is running</h3>\r\n\r\n};\r\n\r\nexport default ChatStatsPage;\r\n ","import { useEffect, useState } from \"react\";\r\nimport { getChatParameters } from \"../api/chatStats-api\";\r\n\r\nconst useChatParameters = () => {\r\n  const [chatParameters, setChatParameters] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    getChatParameters().then((chatParameters) => {\r\n        setChatParameters(chatParameters);\r\n    });\r\n  }, []);\r\n  return [chatParameters, setChatParameters];\r\n};\r\n\r\nexport default useChatParameters;","import React, { useState } from \"react\";\r\nimport useChatParameters from '../hooks/useChatParameters'\r\nimport useChangeChatParameters from '../hooks/useChangeChatParameters'\r\nimport ChatParameters from '../../components/chatParameters'\r\n\r\n\r\nconst ChatParametersPage = () => {\r\n  const [chatParameters] = useChatParameters();\r\n\r\n\r\n  return chatParameters && (\r\n      <ChatParameters chatParameters={chatParameters} />\r\n  );\r\n};\r\n\r\nexport default ChatParametersPage;","import React from \"react\";\nimport ReactDOM from \"react-dom\"; // eslint-disable-next-line\nimport { BrowserRouter, Route, Redirect, Switch, Link } from \"react-router-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport ChatStats from \"./components/chatStats\";\nimport SiteHeader from \"./components/siteHeader\";\nimport ChatParameters from \"./components/chatParameters\";\nimport ChatStatsPage from \"./components/pages/chatStatsPage\";\nimport ChatParametersPage from \"./components/pages/chatParametersPage\";\n\n\n// In general, the top component in an app's component hierarchy is primarily concerned with routing\nconst App = () => {\n  // The exact param disables the partial matching for a route and makes sure that it only returns the route if the path is an EXACT match to the current url.\n  // The App component composes the MoviesContextProvider with 'the rest of our components'. This means all components can now access the values contained in the context associated with the MoviesContextProvider component\n\n  return (\n    <BrowserRouter>\n        <div className=\"jumbotron\">\n          <SiteHeader /> {/* New Header  */}\n          <div className=\"container\">\n                  <Switch>\n                    <Route path=\"/chatParameters\" component={ChatParametersPage} />\n                    <Route path=\"/\" component={ChatStatsPage} />\n                    <Redirect from=\"*\" to=\"/\" />\n                  </Switch>\n          </div>\n        </div>\n    </BrowserRouter>\n  );\n\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}